AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Testing

Globals:
  Function:
    Timeout: 30

Resources:
  InputFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: InputFunction
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
              - "s3:*"
              - "lambda:InvokeFunction"
              - "lambda:InvokeAsync"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              Resource: "*"
      CodeUri: input/
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Layers:
      - !Ref SharedFiles
      Events:
        postDocumentSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /documentSetting
            Method: POST
        putDocumentSettingIdentifier:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /documentSetting/{identifier}
            Method: PUT

        postPageSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /pageSetting
            Method: POST
        putPageSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /pageSetting/{id}
            Method: PUT

        postFieldSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /fieldSetting
            Method: POST
        putFieldSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /fieldSetting/{id}
            Method: PUT

        postRecognitionSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /recognitionSetting
            Method: POST
        putRecognitionSetting:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /recognitionSetting/{id}
            Method: PUT

        getDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /document
            Method: GET
        postDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /document
            Method: POST
        getDocumentByIdentifier:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /document/{identifier}
            Method: GET
        putDocumentByIdentifier:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /document/{identifier}
            Method: PUT

        putPageByDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /document/{identifier}/page/{address}
            Method: PUT

        postField:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /field
            Method: POST
        putField:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /field/{id}
            Method: PUT

        putStrokeByPageNumber:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /page/{address}/stroke
            Method: POST

        updatePageBackground:
          Type: Api
          Properties:
            RestApiId: !Ref ProfileApiGateway
            Path: /page/{address}/background
            Method: PUT

  RecogniserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: RecogniserFunction
      CodeUri: recogniser/
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Layers:
      - !Ref SharedFiles


  SharedFiles:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: SharedFiles
        Description: Shared files like models.py
        ContentUri: shared_files/
        CompatibleRuntimes:
            - python3.7
        RetentionPolicy: Retain


  ProfileApiGateway:
    DependsOn: InputFunction
    Type: 'AWS::Serverless::Api'
    ApiKeySourceType: HEADER
    Properties:
      StageName: prod
      DefinitionUri: 'swagger.yaml'
      Variables:
        InputArn: !GetAtt InputFunction.Arn
      BinaryMediaTypes:
        - "image/jpeg"
        - "image/jpg"
        - "image/png"


  ApiKey: 
    DependsOn: ProfileApiGateway
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Name: "Test customer"
      Description: "CloudFormation API Key V1"
      Enabled: true
      GenerateDistinctId: false
  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      Description: Free usage plan
      Quota:
        Limit: 100
        Period: DAY
      Throttle:
        BurstLimit: 3
        RateLimit: 3
      UsagePlanName: Free
  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
